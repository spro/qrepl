// Generated by CoffeeScript 1.10.0
(function() {
  var fs, getHomeDir, historyPath, objectAssign, path, readline, util;

  readline = require('readline');

  fs = require('fs');

  path = require('path');

  util = require('util');

  objectAssign = require('object-assign');

  getHomeDir = function() {
    return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
  };

  historyPath = function(name) {
    return path.resolve(getHomeDir(), '.' + name + '.qrepl');
  };

  module.exports = function(name, fn, options) {
    var color, loadHistory, prefix, prompt_text, rl, rl_addHistory, saveHistory, suffix;
    if (options == null) {
      options = {};
    }
    loadHistory = function(cb) {
      return fs.readFile(historyPath(name), function(err, history_data) {
        var history_lines;
        if (!history_data) {
          return cb(null, []);
        }
        history_lines = history_data.toString().trim().split('\n');
        history_lines.reverse();
        return cb(null, history_lines);
      });
    };
    saveHistory = function(line) {
      return fs.appendFile(historyPath(name), line + '\n');
    };
    rl = readline.createInterface(objectAssign({
      input: process.stdin,
      output: process.stdout
    }, options));
    rl_addHistory = rl._addHistory;
    rl._addHistory = function() {
      var last, line;
      last = rl.history[0];
      line = rl_addHistory.call(rl);
      if (last !== line) {
        saveHistory(line);
      }
      return line;
    };
    loadHistory(function(err, saved_history) {
      return rl.history.push.apply(rl.history, saved_history);
    });
    prompt_text = '> ';
    color = 36;
    prefix = '\x1b[' + color + 'm';
    suffix = '\x1b[0m';
    rl.setPrompt(prefix + prompt_text + suffix, prompt_text.length);
    rl.prompt();
    return rl.on('line', function(line) {
      line = line.trim();
      return fn(line, function(err, result) {
        console.log(util.inspect(result, {
          colors: true,
          depth: null
        }));
        return rl.prompt();
      });
    });
  };

}).call(this);
